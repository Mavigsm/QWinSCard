<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="baseexceptions_8cpp" kind="file" language="C++">
    <compoundname>baseexceptions.cpp</compoundname>
    <includes local="no">QString</includes>
    <includes refid="baseexceptions_8h" local="yes">baseexceptions.h</includes>
    <incdepgraph>
      <node id="34">
        <label>baseexceptions.h</label>
        <link refid="baseexceptions_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>stdexcpt.h</label>
      </node>
      <node id="33">
        <label>QString</label>
      </node>
      <node id="32">
        <label>baseexceptions.cpp</label>
        <link refid="baseexceptions_8cpp"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
<para>Implements the baseexceptions class. </para>    </briefdescription>
    <detaileddescription>
<para>File is contains implements the class <ref refid="class_base_exceptions" kindref="compound">BaseExceptions</ref>, must implement a std::exception in Qt-style class </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;QString&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="baseexceptions_8h" kindref="compound">baseexceptions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><ref refid="class_base_exceptions_1aa774c51bcf2f8eee36cfbd7ee6fa4082" kindref="member">BaseExceptions::BaseExceptions</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/>:m_errorCode(UNRESOLVED_EXCEPTION)</highlight></codeline>
<codeline lineno="9"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><ref refid="class_base_exceptions_1aa774c51bcf2f8eee36cfbd7ee6fa4082" kindref="member">BaseExceptions::BaseExceptions</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>_What)<sp/>noexcept</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/>:m_errorString(_What),<sp/>m_errorCode(<ref refid="class_base_exceptions_1a291bc9f98189b94aa1b49474c622e21baf75cfbb38113e56646c72d7c763ccc18" kindref="member">UNRESOLVED_EXCEPTION</ref>)</highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><ref refid="class_base_exceptions_1aa774c51bcf2f8eee36cfbd7ee6fa4082" kindref="member">BaseExceptions::BaseExceptions</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_base_exceptions" kindref="compound">BaseExceptions</ref>&amp;<sp/>_That)<sp/>noexcept</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>_That;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><ref refid="class_base_exceptions_1aa774c51bcf2f8eee36cfbd7ee6fa4082" kindref="member">BaseExceptions::BaseExceptions</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString&amp;<sp/>_What)<sp/>noexcept</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/>:m_errorString(_What),<sp/>m_errorCode(<ref refid="class_base_exceptions_1a291bc9f98189b94aa1b49474c622e21baf75cfbb38113e56646c72d7c763ccc18" kindref="member">UNRESOLVED_EXCEPTION</ref>)</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><ref refid="class_base_exceptions_1aa774c51bcf2f8eee36cfbd7ee6fa4082" kindref="member">BaseExceptions::BaseExceptions</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>code)<sp/>noexcept</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/>:m_errorCode(code)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="class_base_exceptions_1a1a7857c450ea0ad4e77426cfd428a979" kindref="member">BaseExceptions::~BaseExceptions</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="class_base_exceptions" kindref="compound">BaseExceptions</ref>&amp;<sp/><ref refid="class_base_exceptions_1a5f92aa2277ba66874a128160a04a7356" kindref="member">BaseExceptions::operator=</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_base_exceptions" kindref="compound">BaseExceptions</ref>&amp;<sp/>_That)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/>m_errorString=_That.m_errorString;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/>m_errorCode=_That.m_errorCode;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="class_base_exceptions_1a88813e74a780773bab20fb43ae0d52e9" kindref="member">BaseExceptions::what</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_errorString.isEmpty()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>exception&quot;</highlight><highlight class="normal"><sp/>:<sp/>m_errorString.toLocal8Bit().constData();</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">QString<sp/><ref refid="class_base_exceptions_1aee9fb2b470e820af7886edfe7a52e333" kindref="member">BaseExceptions::errorString</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="51"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_errorString.isEmpty()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>exception&quot;</highlight><highlight class="normal"><sp/>:<sp/>m_errorString;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_base_exceptions_1a757657cdb19292f7b3b5b8eedde8f688" kindref="member">BaseExceptions::setErrorString</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString&amp;<sp/>errStr)</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/>m_errorString=errStr;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="class_base_exceptions_1aff7e9733d9187facb91f3d10d72fe54d" kindref="member">BaseExceptions::errorCode</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="61"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_errorCode;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_base_exceptions_1aa7fbde1d16b3ab5030424e909042c0dd" kindref="member">BaseExceptions::setErrorCode</ref>(<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>code<sp/>)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/>m_errorCode=code;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="baseexceptions.cpp"/>
  </compounddef>
</doxygen>
