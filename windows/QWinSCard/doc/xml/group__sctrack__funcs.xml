<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="group__sctrack__funcs" kind="group">
    <compoundname>sctrack_funcs</compoundname>
    <title>Smart Card Tracking Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__sctrack__funcs_1ga4dfde1d07cf051f2d582be55129a63fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Smartcards::WinSCard::GetStatusChange</definition>
        <argsstring>(DWORD dwTimeout, ReadersStates &amp;readerStates)</argsstring>
        <name>GetStatusChange</name>
        <param>
          <type>DWORD</type>
          <declname>dwTimeout</declname>
        </param>
        <param>
          <type><ref refid="class_smartcards_1_1_readers_states" kindref="compound">ReadersStates</ref> &amp;</type>
          <declname>readerStates</declname>
        </param>
        <briefdescription>
<para>Blocks execution until the current availability of the cards in a specific set of readers changes. </para>        </briefdescription>
        <detaileddescription>
<para>The caller supplies a list of readers to be monitored by an <ref refid="class_smartcards_1_1_readers_states" kindref="compound">ReadersStates</ref> and the maximum amount of time (in milliseconds) that it is willing to wait for an action to occur on one of the listed readers.</para><para>Note that GetStatusChange uses the user-supplied value in the CurrentState members of the ReaderStates as the definition of the current state of the readers.</para><para>The function returns when there is a change in availability, having filled in the EventState members of ReaderStates appropriately. <parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_s_card_exception" kindref="compound">SCardException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Thrown when a Card error condition occurs and throwErrors is set true. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dwTimeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum amount of time, in milliseconds, to wait for an action. A value of zero causes the function to return immediately. A value of INFINITE causes this function never to time out. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">readerStates</parametername>
</parameternamelist>
<parameterdescription>
<para>Class contains states of the readers. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NativeSCard.h" line="601" column="1" bodyfile="NativeSCard.cpp" bodystart="673" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="group__sctrack__funcs_1ga2ef692a06c2c62775f1d2b3ff06636d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Smartcards::WinSCard::LocateCards</definition>
        <argsstring>(const QStringList &amp;cards, ReadersStates &amp;readerStates)</argsstring>
        <name>LocateCards</name>
        <param>
          <type>const QStringList &amp;</type>
          <declname>cards</declname>
        </param>
        <param>
          <type><ref refid="class_smartcards_1_1_readers_states" kindref="compound">ReadersStates</ref> &amp;</type>
          <declname>readerStates</declname>
        </param>
        <briefdescription>
<para>Searches the readers listed in the readerStates parameter for a card with an ATR string that matches one of the card names specified in cards, returning immediately with the result. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_s_card_exception" kindref="compound">SCardException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Thrown when a Card error condition occurs and throwErrors is set true. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cards</parametername>
</parameternamelist>
<parameterdescription>
<para>The cards names list. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">readerStates</parametername>
</parameternamelist>
<parameterdescription>
<para>Class contains states of the readers. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NativeSCard.h" line="607" column="1" bodyfile="NativeSCard.cpp" bodystart="688" bodyend="710"/>
      </memberdef>
      <memberdef kind="function" id="group__sctrack__funcs_1gaa7b56e2f09d069e77eeb5186a3d363c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Smartcards::WinSCard::LocateCardsByATR</definition>
        <argsstring>(const QVector&lt; QPair&lt; QByteArray, QByteArray &gt;&gt; &amp;atrMask, ReadersStates &amp;readerStates)</argsstring>
        <name>LocateCardsByATR</name>
        <param>
          <type>const QVector&lt; QPair&lt; QByteArray, QByteArray &gt;&gt; &amp;</type>
          <declname>atrMask</declname>
        </param>
        <param>
          <type><ref refid="class_smartcards_1_1_readers_states" kindref="compound">ReadersStates</ref> &amp;</type>
          <declname>readerStates</declname>
        </param>
        <briefdescription>
<para>Searches the readers listed in the readerStates parameter for a card with a name that matches one of the card names contained in one of the pair ATR and ATRMask specified by the atrMask parameter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_s_card_exception" kindref="compound">SCardException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Thrown when a Card error condition occurs and throwErrors is set true. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">atrMask</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of pairs - ATR and ATRMask. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">readerStates</parametername>
</parameternamelist>
<parameterdescription>
<para>Class contains states of the readers. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NativeSCard.h" line="613" column="1" bodyfile="NativeSCard.cpp" bodystart="712" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="group__sctrack__funcs_1ga2ce7dc614b5315d65ec642603cd7cee3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Smartcards::WinSCard::CardCancel</definition>
        <argsstring>(void)</argsstring>
        <name>CardCancel</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Terminates all outstanding actions within a specific resource manager context. </para>        </briefdescription>
        <detaileddescription>
<para>The only requests that you can cancel are those that require waiting for external action by the smart card or user.</para><para>Any such outstanding action requests will terminate with a status indication that the action was canceled.</para><para>This is especially useful to force outstanding GetStatusChange calls to terminate. <parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_s_card_exception" kindref="compound">SCardException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Thrown when a Card error condition occurs and throwErrors is set true. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NativeSCard.h" line="621" column="1" bodyfile="NativeSCard.cpp" bodystart="737" bodyend="749"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
