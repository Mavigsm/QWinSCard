<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_a_p_d_u_command_8cpp" kind="file" language="C++">
    <compoundname>APDUCommand.cpp</compoundname>
    <includes local="no">QTextStream</includes>
    <includes local="no">qalgorithms.h</includes>
    <includes refid="_a_p_d_u_command_8h" local="yes">APDUCommand.h</includes>
    <incdepgraph>
      <node id="2">
        <label>qalgorithms.h</label>
      </node>
      <node id="3">
        <label>APDUCommand.h</label>
        <link refid="_a_p_d_u_command_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>winscard.h</label>
      </node>
      <node id="5">
        <label>QtCore/QByteArray</label>
      </node>
      <node id="0">
        <label>APDUCommand.cpp</label>
        <link refid="_a_p_d_u_command_8cpp"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>QTextStream</label>
      </node>
    </incdepgraph>
    <briefdescription>
<para>Implements the class APDUCommand represents the APDU command. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QTextStream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qalgorithms.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_a_p_d_u_command_8h" kindref="compound">APDUCommand.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_smartcards" kindref="compound">Smartcards</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><ref refid="class_smartcards_1_1_a_p_d_u_command_1a524bdf3ada17aff74ef9c3a70be2a8db" kindref="member">APDUCommand::APDUCommand</ref>(BYTE<sp/>bCla,<sp/>BYTE<sp/>bIns,<sp/>BYTE<sp/>bP1,<sp/>BYTE<sp/>bP2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QByteArray&amp;<sp/>vData,<sp/>BYTE<sp/>nLe)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/>:<sp/>m_bClass(bCla),<sp/>m_bIns(bIns),<sp/>m_bP1(bP1),<sp/>m_bP2(bP2),<sp/>m_nLe(nLe),<sp/>m_vData(vData)</highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><ref refid="class_smartcards_1_1_a_p_d_u_command_1a524bdf3ada17aff74ef9c3a70be2a8db" kindref="member">APDUCommand::APDUCommand</ref>(BYTE<sp/>bCla,<sp/>BYTE<sp/>bIns,<sp/>BYTE<sp/>bP1,<sp/>BYTE<sp/>bP2,<sp/>std::initializer_list&lt;char&gt;<sp/>ilist,<sp/>BYTE<sp/>nLe)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/>:<sp/>m_bClass(bCla),<sp/>m_bIns(bIns),<sp/>m_bP1(bP1),<sp/>m_bP2(bP2),<sp/>m_nLe(nLe)</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/>qCopy(ilist.begin(),<sp/>ilist.end(),<sp/>m_vData.begin());</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><ref refid="class_smartcards_1_1_a_p_d_u_command_1a93d9611f2bd21070098015f880a07d18" kindref="member">APDUCommand::~APDUCommand</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_smartcards_1_1_a_p_d_u_command_1a622ff90c86bdad38da21884a643827b3" kindref="member">APDUCommand::setCommand</ref>(BYTE<sp/>bCla,<sp/>BYTE<sp/>bIns,<sp/>BYTE<sp/>bP1,<sp/>BYTE<sp/>bP2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QByteArray&amp;<sp/>vData,<sp/>BYTE<sp/>nLe)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/>m_bClass<sp/>=<sp/>bCla;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/>m_bIns<sp/>=<sp/>bIns;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/>m_bP2<sp/>=<sp/>bP2;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/>m_bP1<sp/>=<sp/>bP1;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/>m_nLe<sp/>=<sp/>nLe;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><ref refid="class_smartcards_1_1_a_p_d_u_command_1a15c77c4c32ef1b8411268a381a8f60e8" kindref="member">setData</ref>(vData);</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">QString<sp/><ref refid="class_smartcards_1_1_a_p_d_u_command_1a87627f0486bd38545b1a8ee12deebe93" kindref="member">APDUCommand::toString</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="38"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/>QString<sp/>strData;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/>QTextStream<sp/>sDataStream(&amp;strData);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/>sDataStream.setIntegerBase(16);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/>sDataStream.setNumberFlags(QTextStream::UppercaseDigits);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/>BYTE<sp/>bLc<sp/>=<sp/>0,<sp/>bP3<sp/>=<sp/>m_nLe;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>m_vData.size();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>sDataStream.setFieldWidth(2);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nI<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nI<sp/>&lt;<sp/>count)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>di<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(di&lt;8<sp/>&amp;&amp;<sp/>nI&lt;count)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>sDataStream<sp/>&lt;&lt;<sp/>qSetPadChar(&apos;0&apos;)<sp/>&lt;&lt;<sp/>static_cast&lt;BYTE&gt;(m_vData.at(nI++))<sp/>&lt;&lt;<sp/>qSetPadChar(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>di++;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/>sDataStream<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>bLc<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">BYTE</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_vData.size());</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>bP3<sp/>=<sp/>bLc;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/>QString<sp/>result;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/>sDataStream.flush();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/>sDataStream.setString(&amp;result);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/>sDataStream.setIntegerBase(16);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/>sDataStream.setNumberFlags(QTextStream::UppercaseDigits);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/>sDataStream.setFieldWidth(2);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/>sDataStream<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Class=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>qSetPadChar(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>m_bClass<sp/>&lt;&lt;<sp/>qSetPadChar(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Ins=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>qSetPadChar(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>m_bIns<sp/>&lt;&lt;<sp/>qSetPadChar(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>P1=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>qSetPadChar(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>m_bP1<sp/>&lt;&lt;<sp/>qSetPadChar(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>P2=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>qSetPadChar(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>m_bP2<sp/>&lt;&lt;<sp/>qSetPadChar(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>P3=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>qSetPadChar(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>bP3<sp/>&lt;&lt;<sp/>qSetPadChar(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Data=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/>strData;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/>sDataStream.flush();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">QByteArray<sp/><ref refid="class_smartcards_1_1_a_p_d_u_command_1ac1c3fa1c70a14b31391914836c1bd1d8" kindref="member">APDUCommand::createCommandVector</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="75"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/>QByteArray<sp/>commandVector;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dataSize<sp/>=<sp/>m_vData.size();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/>commandVector.push_back(static_cast&lt;char&gt;(m_bClass));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/>commandVector.push_back(static_cast&lt;char&gt;(m_bIns));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/>commandVector.push_back(static_cast&lt;char&gt;(m_bP1));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/>commandVector.push_back(static_cast&lt;char&gt;(m_bP2));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_vData.isEmpty())</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>commandVector.push_back(static_cast&lt;char&gt;(m_nLe));</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>commandVector.push_back(static_cast&lt;char&gt;(dataSize));</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>commandVector.reserve(<ref refid="class_smartcards_1_1_a_p_d_u_command_1ad3064be59d9cb0fd950fd123a00dacb7" kindref="member">APDU_MIN_LENGTH</ref><sp/>+<sp/>dataSize+1);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>commandVector.append(m_vData);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>commandVector;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="APDUCommand.cpp"/>
  </compounddef>
</doxygen>
